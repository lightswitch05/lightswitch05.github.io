[
  {
    "title": "Blogging With Monologue",
    "published": "2012-12-29T05:00:00.000Z",
    "body": "I recently decided my poor website needed more content to cheer it up a bit, so naturally I looked into blogging frameworks.Since this is a Ruby on Rails site, I first searched for blogging engines and quickly came across [Monologue](https://github.com/jipiboily/monologue). Like any rails engine should be - it was a breeze to integrate into my existing site and database. From first glance the default look & feel of Monologue is somewhat lacking - but that was exactly what I was looking for. Without a ton of existing styling, I was easily able to override the styling to match my existing site.\n\nFirst, I looked inside of [Monologue's source](https://github.com/jipiboily/monologue/tree/master/app/assets/stylesheets/monologue/blog) and found [custom.css](https://github.com/jipiboily/monologue/blob/master/app/assets/stylesheets/monologue/blog/custom.css). The great thing about rails engines are that any file can be overridden by the hosting application. All I had to do was create a custom.css file inside of `host_app\\app\\assets\\stylesheets\\monologue\\blog` - e.g. the same path and file name as monologue's custom.css except inside of my host application. Putting all my CSS into this custom.css file allowed me to easily inject my own CSS rules into Monologue.\n\n  Unfortunately my browser was still obeying any CSS rules inside of monologue.css over the rules I specified inside of my custom.css. While I could just override monologue.css as well, I didn't want to override more files then was needed. Plus, that would cause a lot of duplication between my application and the Monologue engine. Even more then the basic styling, I was going to have to override Monologue's layout to add a navbar to match my other pages. I created application.html.erb inside of `host_app\\app\\views\\layouts\\monologue` to match Monologue's [application.html.erb](https://github.com/jipiboily/monologue/blob/master/app/views/layouts/monologue/application.html.erb). I added my navbar, and I also added a CSS class of `.grayout` to the body. By adding this parent CSS class, it allowed me to easily force my styling in custom.css to override the styles of monologue.css.\n\n  A good example of overriding a style `.content article footer .social-tagline{ color: #181818; }`\n  could now be overridden by using\n  `.grayout .content article footer .social-tagline{ color: black; }`",
    "tags": ["tech", "rails", "html"]
  }, {
    "title": "TideSDK - Quick Cross-Platform Apps",
    "published": "2013-01-08T05:00:00.000Z",
    "body": "Last week I started working on a desktop client for the [Clipster Rails Engine](https://github.com/kwbock/clipster). My goals of the desktop client were to be quick, simple, and most of all cross-platform. I initially looked at [Qtâ€™s C++ Framework](https://qt-project.org/). While I love using Qt for cross-platform development, the libraries are quite large and it seemed overkill for such a simple application. After searching around I stumbled across [TideSDK](http://tidesdk.multipart.net/docs/user-dev/generated/#). TideSDK is essentially a compilable website. It uses HTML5 & CSS for the GUI. For any back-end processing, it can use JavaScript, Ruby, Python, and even PHP.\n\nUsing TideSDK for Clipster Desktop was almost a no-brainer. Not only was it a simple cross-platform solution, but it allowed me to re-use many styling elements from the Clipster engine. Also the Clipser API supports JSON, so what better handling language could I ask for than JavaScript? My only initial concern going with TideSDK was user properties. To complete my goal of a quick application I needed to allow users to set default values for the host, title, and language. Looking through the API I came across exactly what I was looking for - [Ti.App.Properties](http://tidesdk.multipart.net/docs/user-dev/generated/#!/api/Ti.App.Properties). I also found some other cool features I might want in the future like an update manager, clipboard access, and database support.\n\n[Clipster Desktop](https://github.com/lightswitch05/clipster_desktop) is almost complete and will be ready for the next release of Clipster (v0.6.0), which adds the API feature being used. Since TideSDK was actually inspired (or part of?) by the cross-platform mobile SDK Titanium, I might even try a Clipster Mobile app for my next project!",
    "tags": ["tech", "html"]
  }
]
